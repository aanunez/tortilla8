          ; Note: this source has been modified by David WINTER on 17 SEP 1997
          ;       (only the syntax changed: it has been converted in CHIPPER)
          ;
          ; The source could be optimized to save some bytes, but I didn't wanted
          ; to modify it since there is no specific interest in this.
          ;
          ; NOTE THAT THE ORIGINAL SOURCE HAD SEVERAL ERRORS !!!
          ;
          ; ---------------------------------------------------------------------------
          ;
          ; From: vervalin@AUSTIN.LOCKHEED.COM (Paul Vervalin)
          ;
          ;
          ;        OK folks here it is!  PONG for the HP48SX written in CHIP-48.
          ;        Some things you should know before you start playing are...
          ;        1)  This is my first attempt at programming in CHIP-48, so I 
          ;            know there are probably a few things that could have been
          ;            done better.
          ;        2)  The game never ends.  It keeps score, but only up to 9 for
          ;            each player, then it will roll over to 0.  Sorry, its the
          ;            only way I could think of to do it.  So, you have to play
          ;            whoever gets to a number first, wins.
          ;        3)  It is kind of slow, but then there are two paddles and ball
          ;            moving around all at once.
          ;        4)  The player who got the last point gets the serve...
          ;        5)  Keys 7 and 4 (on the HP48) control the up and down of the 
          ;            left player and the / and * keys control the up and down of
          ;            the right player.
          ;
          ;        I think that's about it, so have fun!  
          ; 
          ; This is a detailed breakdown of the game, sooooooo, if anybody wants to
          ; make it better, or change it in some way, it might be a little easier.
          ; Also, about half of the code was in some way extracted from the BRIX
          ; program.  So, thanks to whoever wrote the original BRIX game.
          ;
          ;
          ; Registers
          ; ---------
          ; V0-V3  are scratch registers
          ; V4     X coord. of score
          ; V5     Y coord. of score
          ; V6     X coord. of ball
          ; V7     Y coord. of ball
          ; V8     X direction of ball motion
          ; V9     Y direction of ball motion
          ; VA     X coord. of left player paddle
          ; VB     Y coord. of left player paddle
          ; VC     X coord. of right player paddle
          ; VD     Y coord. of right player paddle
          ; VE     Score
          ; VF     collision detection
          
          
0x0201    option binary  ; To assemble PONG for HP48 use, remove this option
          
          
0x0202        LD  VA, 2  ; Set left player X coord.
0x0203        LD  VB, 12 ; Set left player Y coord.
0x0204        LD  VC, 63 ; Set right player X coord.
0x0205        LD  VD, 12 ; Set right player Y coord.
          
0x0206        LD  I,  Paddle ; Get address of paddle sprite
0x0207        DRW VA, VB, 6  ; Draw left paddle
0x0208        DRW VC, VD, 6  ; Draw right paddle
          
0x0209        LD  VE, 0       ; Set score to 00
0x020a        CALL Draw_Score ; Draw score
          
0x020b        LD  V6, 3 ; Set X coord. of ball to 3
0x020c        LD  V8, 2 ; Set ball X direction to right
          
          
          Big_Loop:
          
0x020d        LD  V0, #60 ; Set V0=delay before ball launch
0x020e        LD  DT, V0  ; Set delay timer to V0
          DT_loop:        ;
0x020f        LD  V0, DT  ; Read delay timer into V0
0x0210        SE  V0, 0   ; Skip next instruction if V0=0
0x0211        JP  DT_Loop ; Read again delay timer if not 0
          
0x0212        RND V7, 23  ; Set Y coord. to rand # AND 23 (0...23)
0x0213        ADD V7, 8   ; And adjust it to is 8...31
          
0x0214        LD  V9, #FF   ; Set ball Y direction to up
0x0215        LD  I, Ball   ; Get address of ball sprite
0x0216        DRW V6, V7, 1 ; Draw ball
          
          Padl_Loop:
0x0217        LD  I, Paddle ; Get address of paddle sprite
0x0218        DRW VA, VB, 6 ; Draw left paddle
0x0219        DRW VC, VD, 6 ; Draw right paddle
          
0x021a        LD  V0, 1   ; Set V0 to KEY 1
0x021b        SKNP V0     ; Skip next instruction if KEY in 1 is not pressed
0x021c        ADD VB, #FE ; Subtract 2 from Y coord. of left paddle
          
0x021d        LD  V0, 4   ; Set V0 to KEY 4
0x021e        SKNP V0     ; Skip next instruction if KEY in 4 is not pressed
0x021f        ADD VB, 2   ; Add 2 to Y coord. of left paddle
          
0x0220        LD  V0, 31    ; Set V0 to max Y coord.  | These three lines are here to
0x0221        AND VB, V0    ; AND VB with V0          | adjust the paddle position if
0x0222        DRW VA, VB, 6 ; Draw left paddle        | it is out of the screen
          
0x0223        LD  V0, #0C ; Set V0 to KEY C
0x0224        SKNP V0     ; Skip next instruction if KEY in C is not pressed
0x0225        ADD VD, #FE ; Subtract 2 from Y coord. of right paddle
          
0x0226        LD  V0, #0D ; Set V0 to KEY D
0x0227        SKNP V0     ; Skip next instruction if KEY in D is not pressed 
0x0228        ADD VD, 2   ; Add 2 to Y coord. of right paddle
          
0x0229        LD  V0, 31    ; Set V0 to max Y coord.  | These three lines are here to
0x022a        AND VD, V0    ; AND VD with V0          | adjust the paddle position if
0x022b        DRW VC, VD, 6 ; Draw right paddle       | it is out of the screen
          
0x022c        LD  I, Ball   ; Get address of ball sprite
0x022d        DRW V6, V7, 1 ; Draw ball
          
0x022e        ADD V6, V8  ; Compute next X coord of the ball
0x022f        ADD V7, V9  ; Compute next Y coord of the ball
          
0x0230        LD  V0, 63  ; Set V0 to max X location
0x0231        AND V6, V0  ; AND V6 with V0
          
0x0232        LD  V1, 31  ; Set V1 to max Y location
0x0233        AND V7, V1  ; AND V7 with V1
          
0x0234        SNE V6, 2      ; Skip next instruction if ball not at left
0x0235        JP  Left_Side  ;
          
0x0236        SNE V6, 63     ; Skip next instruction if ball not at right
0x0237        JP  Right_Side ; 
          
          Ball_Loop:
0x0238        SNE V7, 31  ; Skip next instruction if ball not at bottom
0x0239        LD  V9, #FF ; Set Y direction to up
          
0x023a        SNE V7, 0   ; Skip next instruction if ball not at top
0x023b        LD  V9, 1   ; Set Y direction to down
          
0x023c        DRW V6, V7, 1 ; Draw ball
0x023d        JP  Padl_loop ;
          
          Left_Side:
0x023e        LD  V8, 2    ; Set X direction to right
0x023f        LD  V3, 1    ; Set V3 to 1 in case left player misses ball
0x0240        LD  V0, V7   ; Set V0 to V7 Y coord. of ball
0x0241        SUB V0, VB   ; Subtract position of paddle from ball
0x0242        JP  Pad_Coll ; Check for collision
          
          Right_Side:
0x0243        LD  V8, 254  ; Set X direction to left
0x0244        LD  V3, 10   ; Set V3 to 10 in case right player misses ball
0x0245        LD  V0, V7   ; Set V0 to V7 Y coord. of ball
0x0246        SUB V0, VD   ; Subtract position of paddle from ball
          
          Pad_Coll:
0x0247        SE  VF, 1     ; Skip next instruction if ball not above paddle
0x0248        JP  Ball_Lost ;
          
0x0249        LD  V1, 2    ; Set V1 to 02
0x024a        SUB V0, V1   ; Subtract V1 from V0
0x024b        SE  VF, 1    ; Skip next instr. if ball not at top of paddle
0x024c        JP  Ball_Top ; Ball at top of paddle
          
0x024d        SUB V0, V1   ; Subtract another 2 from V0
0x024e        SE  VF, 1    ; Skip next instr. if ball not at middle of paddle
0x024f        JP  Pad_Hit  ; Ball in middle of paddle
          
0x0250        SUB V0, V1   ; Subtract another 2 from V0
0x0251        SE  VF, 1    ; Skip next instr. if ball not at bottom of paddle
0x0252        JP  Ball_Bot ; Ball at bottom of paddle
          
          Ball_Lost:
0x0253        LD  V0, 32  ; Set lost ball beep delay
0x0254        LD  ST, V0  ; Beep for lost ball
          
0x0255        CALL Draw_Score ; Erase previous score
0x0256        ADD VE, V3      ; Add 1 or 10 to score depending on V3
0x0257        CALL Draw_Score ; Write new score
          
0x0258        LD  V6, 62  ; Set ball X coord. to right side
0x0259        SE  V3, 1   ; Skip next instr. if right player got point
0x025a        LD  V6, 3   ; Set ball X coord. to left side
0x025b        LD  V8, #FE ; Set direction to left
0x025c        SE  V3, 1   ; Skip next instr. if right player got point
0x025d        LD  V8, 2   ; Set direction to right
0x025e        JP Big_Loop ;
          
          Ball_Top:
0x025f        ADD V9, #FF ; Subtract 1 from V9, ball Y direction
0x0260        SNE V9, #FE ; Skip next instr. if V9 != FE (-2)
0x0261        LD  V9, #FF ; Set V9=FF (-1)
0x0262        JP  Pad_Hit
          
          Ball_Bot:
0x0263        ADD V9, 1   ; Add 1 to V9, ball Y direction
0x0264        SNE V9, 2   ; Skip next instr. if V9 != 02
0x0265        LD  V9, 1   ; Set V9=01
          
          Pad_Hit:
0x0266        LD  V0, 4   ; Set beep for paddle hit
0x0267        LD  ST, V0  ; Sound beep
          
0x0268        ADD V6, 1   ;
0x0269        SNE V6, 64  ;
0x026a        ADD V6, 254 ;
          
0x026b        JP  Ball_Loop
          
          Draw_Score:
0x026c        LD  I,  Score   ; Get address of Score
0x026d        LD  B,  VE      ; Stores in memory BCD representation of VE
0x026e        LD  V2, [I]     ; Reads V0...V2 in memory, so the score
0x026f        LD  F,  V1      ; I points to hex char in V1, so the 1st score char
0x0270        LD  V4, #14     ; Set V4 to the X coord. to draw 1st score char
0x0271        LD  V5, 0       ; Set V5 to the Y coord. to draw 1st score char
0x0272        DRW V4, V5, 5   ; Draw 8*5 sprite at (V4,V5) from M[I], so char V1
0x0273        ADD V4, #15     ; Set X to the X coord. of 2nd score char
0x0274        LD  F, V2       ; I points to hex char in V2, so 2nd score char
0x0275        DRW V4, V5, 5   ; Draw 8*5 sprite at (V4,V5) from M[I], so char V2
0x0276        RET             ; Return
          
          Paddle:
0x0277        DW #8080
0x0278        DW #8080
0x0279        DW #8080
          
          Ball:
0x027a        DW #8000
          
          Score:
0x027b        DW #0000
0x027c        DW #0000
